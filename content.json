{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"排序算法","slug":"排序算法","date":"2019-11-12T13:28:34.224Z","updated":"2019-11-12T13:30:23.805Z","comments":true,"path":"2019/11/12/排序算法/","link":"","permalink":"http://yoursite.com/2019/11/12/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/","excerpt":"","text":"冒泡、选择、插入排序三种排序方法####1.冒泡排序该方法的原理是将第一项与第二项比较，如果第二项比第一项小，则两项位置交换，接下来再用第二项与第三项比较，如果第三项比第二项小，两项位置交换，再下来用第三项与第四项相比，如果第四项比第三项大则两数位置不交换。再用第四项与第五项相比。以此类推，最后我们能排出一个最小的数。然后再从第二项开始往后比，排出次小的则需要用两个for循环。 如图 代码实现 int main(){ int i,j,a[100],n,temp;//先设定一个100的数组，以n做为具体数组大小 for(n=0;n&lt;5;n++) scanf(&quot;%d&quot;,&amp;a[n]); for(i=0;i&lt;5;i++){ for(j=0;j&lt;4;j++){ if(a[i]&lt;a[j]){ temp=a[i]; a[i]=a[j]; a[j]=temp; } } } for(n=0;n&lt;5;n++) printf(&quot;%d&quot;,a[n]); return 0; }2.选择排序这一排序方法是在所有的数组元素中先选择一个最小的元素，然后将此元素放到排序序列的起始位置，然后再从剩余未序元素中继续寻找最小元素。放到已排序列的末尾，以此类推，直到所有元素均排序完毕。此方法用到一个for循环和交换算法。 代码实现 int main(){ int i,j,k,a[5],temp; for(i=0;i&lt;5;i++) scanf(&quot;%d&quot;,&amp;a[i]); for(i=0;i&lt;5;i++){ k=i; for(j=i+1;j&lt;5;j++){ if (a[j] &lt; a[k]) { k = j; } } temp = a[k]; a[k] = a[i]; a[i] = temp; } for(i=0;i&lt;5;i++) printf(&quot;%d &quot;,a[i]); return 0; }3.插入排序此排序方法是将数组的第一个元素认定为已排序元素，将之后的元素认定为未排序元素，然后从未排序元素的第一个元素开始，如果比一排序元素大则放到此元素之后，如果比该元素小则放到此元素之前。然后把这两个数认定为已排序好的数列。再从未排序数列中的第一个元素，与已排序数列做比较。同理，直至排序完成。 如图 代码实现 int main( { int i,j,n; int a[5]; for(n=0;n&lt;5;n++) scanf(&quot;%d&quot;,&amp;a[n]); for(i=1; i&lt;n; i++) if(a[i] &lt; a[i-1]) { int temp = a[i]; //保存要比较的值 for(j=i-1; j&gt;=0 &amp;&amp; a[j]&gt;temp; j--) //从后向前查找待插入位置 a[j+1] = a[j]; //挪位 a[j+1] = temp; //复制到插入位置 } for(n=0;n&lt;5;n++) printf(&quot;%d &quot;,a[n]); return 0; }","categories":[],"tags":[]},{"title":"搭建博客","slug":"搭建博客","date":"2019-11-06T14:48:34.195Z","updated":"2019-11-11T03:42:09.083Z","comments":true,"path":"2019/11/06/搭建博客/","link":"","permalink":"http://yoursite.com/2019/11/06/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"搭建博客#用Githug+hexo搭建博客 此为纯小白教程博主前几天搭建了自己的博客，几经波折，最终在学长学姐的帮助下成功的搭建了博客，现在开始我的讲解。 安装git和Node 配置git环境成功的标志是在电脑上任何地方单击右键都会出现以下两个选项 注册账户 进行Github账户注册和新建项目，项目必须要遵守格式：账户名.github.io，不然接下来会有很多麻烦。并且需要勾选Initialize this repository with a README 查看 在开始位置输入命令提示符，打开CMD窗口查看是否安装并配置好node环境如图 安装hexo 安装Hexo，在自己认为合适的地方创个文件夹，我在D盘建了一个blog文件夹。然后可以在我的文件窗口最上方敲击CMD进入此文件夹的命令窗口 以下是安装的两个命令 npm install hexo -cli -g npm install hexo –save 查看版本的命令 hexo -v 如果出现版本号则证明安装成功 问题：如果此时出现hexo不是内部或外部命令 解决方法：在开始窗口输入环境变量，点击此窗口 这个之后，咱再运行一次hexo命令，即 hexo -v 如下图 输入以下命令初始化该文件夹（有点漫长，耐心等待） hexo init 看到后面的“Start blogging with Hexo！”则这步已成功。 输入以下命令安装所需要的组件 npm install 输入以下命令首次体验Hexo hexo g 输入以下开启服务器，访问该网址，正式体验Hexo hexo s 将网址地址在浏览器中打开则能看到以下界面 问题:如果打开网址时出现404，那么可能端口被占用了 解决方法:此时我们ctrl+c停止服务器，接着输入“hexo server -p 端口号”来改变端口号，再输入新的网址则可 将Hexo与Github page联系起来 设置Git的user name和email在自己所新建的blog文件夹中单击右键，点击git bush 这里“ ”中的名字和邮箱地址可以替换成自己的信息。输入以下检查是否由.ssh的文件夹 cd ~/.ssh 输入以下列出该文件下的内容。下图说明存在 ls 输入以下并连续三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\\Users\\Administrator.ssh）。 ssh -keygen -t rsa -C “自己的邮箱地址” 在此步输入 y 输入以下，添加密钥到ssh-agent eval “$(ssh-agent -s)” 再输入以下，添加生成的SSH key到ssh-agent ssh-add ~/.ssh/id_rsa 登录Github，点击头像下的settings，添加ssh 新建一个new ssh key，将id_rsa.pub文件里的内容复制上去（可用记事本打开） 输入以下，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了 ssh -T git@github.com 问题：假如ssh-key配置失败，那么只要以下步骤就能完全解决解决方法：首先，清除所有的key-pair，输入 ssh -add -Drm -r ~/.ssh 删除你在github中的public-key重新生成ssh密钥对ssh-keygen -t rsa -C “你的邮箱地址”然后继续上述操作即可 配置Deployment 在blog文件夹中，找到_config.yml文件，修改repo值（在末尾直接输入即可） 重点：所有的冒号后要有一个空格，否则自己的页面则是空白 repository值是你在github项目里的ssh（右下角） 发布 在blog文件夹中右击鼠标，进入Git bash 执行命令： npm install hexo -deployer -git –save 然后输入 hexo g hexo d 完成后，你就有属于自己的博客了可在浏览器中打开在GitHub setting中即可看到自己的博客地址。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-11-02T15:43:28.017Z","updated":"2019-11-02T15:43:28.017Z","comments":true,"path":"2019/11/02/hello-world/","link":"","permalink":"http://yoursite.com/2019/11/02/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}